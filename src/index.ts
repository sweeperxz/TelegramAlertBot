import { Telegraf } from 'telegraf';
import { VercelRequest, VercelResponse } from '@vercel/node';
import { production } from './core';
import { alert, startStatusCheck } from './commands/alert';
import createDebug from 'debug';

const debug = createDebug('bot:index');

const BOT_TOKEN = process.env.BOT_TOKEN || '';
const ENVIRONMENT = process.env.NODE_ENV || '';

const bot = new Telegraf(BOT_TOKEN);

// –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ Vercel
console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...");

bot.command('start', async (ctx) => {
    debug("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞...");
    startStatusCheck(ctx); // –ü–µ—Ä–µ–¥–∞–µ–º ctx –¥–ª—è —Ä–∞–±–æ—Ç—ã
    await ctx.reply("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–Ω—ë—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–≤–æ–≥–∏!");
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã alert
bot.command('alert', alert());

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –∏–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
if (ENVIRONMENT !== 'production') {
    bot.launch().then(() => {
        console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.');
    });
}

// prod mode (Vercel)
export const startVercel = async (req: VercelRequest, res: VercelResponse) => {
    await production(req, res, bot); // –ü–µ—Ä–µ–¥–∞–µ–º bot –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∫—à–Ω
};
